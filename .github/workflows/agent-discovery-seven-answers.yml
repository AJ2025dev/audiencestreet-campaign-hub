name: Agent Discovery (Seven Answers)
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  agent_discovery:
    runs-on: ubuntu-latest
    permissions:
      issues: write   # allow creating issues with GITHUB_TOKEN:contentReference[oaicite:7]{index=7}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Run discovery script
        shell: python -u {0}  # run an inline Python script:contentReference[oaicite:8]{index=8}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          import os, json, re, requests

          # Gather repository info and auth token from environment
          repo_full_name = os.environ.get('GITHUB_REPOSITORY')
          token = os.environ.get('GITHUB_TOKEN')
          if not token or not repo_full_name:
              print("Missing GITHUB_TOKEN or repo name")
              exit(1)

          # Containers for findings
          languages = set()
          frameworks = set()
          runtime_info = []
          data_stores = set()
          external_services = set()
          security_points = []
          ci_cd_points = []
          architecture_points = []

          # Helper: add language by file extension
          def detect_language_by_ext(ext):
              ext = ext.lower()
              if ext == "py": languages.add("Python")
              elif ext in ["js", "jsx"]: languages.add("JavaScript")
              elif ext in ["ts", "tsx"]: languages.add("TypeScript")
              elif ext == "java": languages.add("Java")
              elif ext == "cs": languages.add("C#")
              elif ext == "go": languages.add("Go")
              elif ext == "rb": languages.add("Ruby")
              elif ext == "php": languages.add("PHP")
              elif ext == "dart": languages.add("Dart")
              elif ext == "swift": languages.add("Swift")
              elif ext in ["c", "cpp", "cc", "h", "hpp"]: languages.add("C/C++")

          # Walk through repository files
          for root, dirs, files in os.walk("."):
              # Skip unnecessary directories
              for d in list(dirs):
                  if d.startswith(".git"):
                      dirs.remove(d)
                  if d in ["node_modules", "__pycache__", "venv", ".venv", "dist", "build"]:
                      dirs.remove(d)
              for filename in files:
                  filepath = os.path.join(root, filename)
                  fname = filename.lower()
                  # Skip binary or irrelevant file types
                  if fname.endswith((".png", ".jpg", ".jpeg", ".gif", ".pdf", ".ico", ".exe", ".zip", ".lock")):
                      continue

                  # Language detection by extension
                  if "." in filename:
                      ext = filename.rsplit(".", 1)[-1]
                      detect_language_by_ext(ext)

                  # Parse specific files for content:
                  if fname == "package.json":
                      try:
                          pkg = json.load(open(filepath, "r"))
                      except Exception as e:
                          pkg = {}
                      else:
                          # If package.json exists, it's a Node.js project
                          languages.add("JavaScript")
                          # Check dependencies for frameworks/libraries
                          for dep_type in ["dependencies", "devDependencies"]:
                              for dep_name, dep_ver in pkg.get(dep_type, {}).items():
                                  name = dep_name.lower()
                                  # Frontend/back-end frameworks in Node
                                  if name == "next" or name.startswith("next@"):
                                      frameworks.add("Next.js")
                                  if name.startswith("react"):
                                      frameworks.add("React")
                                  if name.startswith("@angular"):
                                      frameworks.add("Angular"); languages.add("TypeScript")
                                  if "express" in name:
                                      frameworks.add("Express.js")
                                  if "nuxt" in name:
                                      frameworks.add("Nuxt.js")
                                  if "gatsby" in name:
                                      frameworks.add("Gatsby")
                                  # Databases or storage libraries
                                  if "mongoose" in name or "mongodb" in name:
                                      data_stores.add("MongoDB")
                                  if name == "pg" or "postgres" in name:
                                      data_stores.add("PostgreSQL")
                                  if "mysql" in name:
                                      data_stores.add("MySQL")
                                  if "redis" in name:
                                      data_stores.add("Redis")
                                  # External service libraries
                                  if "aws-sdk" in name:
                                      external_services.add("AWS SDK (for AWS services)")
                                  if "firebase" in name:
                                      external_services.add("Firebase")
                                  if "azure" in name:
                                      external_services.add("Azure services")
                                  if "google-cloud" in name or "gcloud" in name:
                                      external_services.add("Google Cloud services")
                                  if "stripe" in name:
                                      external_services.add("Stripe API")
                                  if "twilio" in name:
                                      external_services.add("Twilio API")
                                  if "sendgrid" in name:
                                      external_services.add("SendGrid API")
                                  if "auth0" in name:
                                      external_services.add("Auth0")
                                  if "okta" in name:
                                      external_services.add("Okta")
                                  if "paypal" in name:
                                      external_services.add("PayPal API")
                                  if "sentry" in name:
                                      external_services.add("Sentry (monitoring)")
                                  if "newrelic" in name or "new relic" in name:
                                      external_services.add("New Relic (monitoring)")
                          # Check npm scripts for runtime clues
                          start_script = pkg.get("scripts", {}).get("start", "")
                          if start_script:
                              if "node " in start_script:
                                  runtime_info.append("Runs on Node.js (npm start script uses node)")
                              if "next start" in start_script:
                                  runtime_info.append("Next.js runtime (Node.js server)")
                              if "react-scripts start" in start_script:
                                  runtime_info.append("React development server (CRA)")
                  elif fname in ["requirements.txt", "pipfile", "pyproject.toml", "environment.yml"]:
                      # Python dependencies file found
                      languages.add("Python")
                      try:
                          content = open(filepath, "r").read().lower()
                      except Exception:
                          content = ""
                      # Common Python web frameworks
                      if "django" in content:
                          frameworks.add("Django")
                      if "flask" in content:
                          frameworks.add("Flask")
                      if "fastapi" in content:
                          frameworks.add("FastAPI")
                      # Databases in Python deps
                      if "psycopg2" in content or "postgres" in content:
                          data_stores.add("PostgreSQL")
                      if "pymysql" in content or "mysql" in content:
                          data_stores.add("MySQL")
                      if "pymongo" in content or "mongo" in content:
                          data_stores.add("MongoDB")
                      if "redis" in content:
                          data_stores.add("Redis")
                      # External services in Python deps
                      if "boto3" in content:
                          external_services.add("AWS (boto3 library)")
                      if "google-cloud" in content or "firebase" in content:
                          external_services.add("Google Cloud / Firebase")
                      if "azure" in content:
                          external_services.add("Azure SDK")
                      if "stripe" in content:
                          external_services.add("Stripe API")
                      if "twilio" in content:
                          external_services.add("Twilio API")
                      if "sendgrid" in content:
                          external_services.add("SendGrid API")
                      # Indication of tests (for CI info)
                      if "pytest" in content or "unittest" in content:
                          ci_cd_points.append("Test framework dependencies present")
                  # Check for infrastructure/CI files by name
                  if fname == "dockerfile":
                      runtime_info.append("Docker container environment (Dockerfile present)")
                  if fname in ["docker-compose.yml", "docker-compose.yaml"]:
                      runtime_info.append("Docker Compose configuration for multi-container setup")
                  if fname == "serverless.yml":
                      runtime_info.append("Serverless deployment configuration (e.g. AWS Lambda)")
                  if fname == "procfile":
                      runtime_info.append("Procfile (Heroku deployment configuration)")
                  if fname == "manage.py" or fname == "settings.py":
                      frameworks.add("Django")  # typical Django structure
                  if fname == "angular.json":
                      frameworks.add("Angular (frontend)"); languages.add("TypeScript")
                  if fname == "firebase.json":
                      external_services.add("Firebase (hosting config)")
                  if fname == "app.yaml":
                      runtime_info.append("Google App Engine configuration (app.yaml)")
                  if fname.endswith(".csproj") or fname.endswith(".sln"):
                      languages.add("C#")
                  if fname == "pom.xml" or fname == "build.gradle":
                      languages.add("Java")
                  if fname.endswith(".swift"):
                      languages.add("Swift")
                  if fname.endswith(".dart"):
                      languages.add("Dart")
                  if fname == "cargo.toml":
                      languages.add("Rust")
                  if fname == "composer.json":
                      languages.add("PHP")
                  if fname == ".travis.yml":
                      ci_cd_points.append("Travis CI configuration")
                  if fname == "jenkinsfile":
                      ci_cd_points.append("Jenkins pipeline configuration")
                  if fname == "azure-pipelines.yml":
                      ci_cd_points.append("Azure Pipelines configuration")
                  # CircleCI config in .circleci/ directory
                  if (fname == "config.yml" or fname == "config.yaml") and "/.circleci/" in filepath.replace("\\", "/"):
                      ci_cd_points.append("CircleCI configuration")
                  if "/.github/workflows/" in filepath.replace("\\", "/"):
                      ci_cd_points.append("GitHub Actions workflow files")
                  # Read file content to find security/compliance keywords
                  text = ""
                  try:
                      # Only read text if file size is not huge (to avoid memory issues)
                      if os.path.getsize(filepath) < 500000:  # 0.5 MB threshold
                          text = open(filepath, "r", errors="ignore").read().lower()
                  except Exception:
                      text = ""
                  if filename.upper() == "LICENSE":
                      # Determine license type if possible
                      if "mit license" in text:
                          security_points.append("Open-source license: MIT")
                      elif "apache license" in text:
                          security_points.append("Open-source license: Apache License")
                      elif "gnu general public license" in text or "gpl" in text:
                          security_points.append("Open-source license: GNU GPL")
                      else:
                          security_points.append("License file present (type not automatically detected)")
                  if text:
                      # Check for mentions of privacy/compliance
                      if "gdpr" in text or "privacy policy" in text:
                          security_points.append("Mentions privacy/GDPR compliance")
                      if "encrypt" in text or "encryption" in text or "cryptograph" in text:
                          security_points.append("Uses encryption for data/security")
                      if "jwt" in text or "jsonwebtoken" in text:
                          security_points.append("Uses JWT for authentication")
                      if "oauth" in text:
                          security_points.append("Supports OAuth authentication")
                      if "iso 27001" in text or "soc 2" in text:
                          security_points.append("Mentions compliance standards (ISO 27001/SOC2)")
                      if "auth0" in text:
                          external_services.add("Auth0 (authentication service)")
                      if "firebase" in text and "firebase" not in external_services:
                          # If "firebase" appears in code (maybe used as SDK), ensure noted
                          external_services.add("Firebase")

          # Derive architecture from top-level structure
          top_dirs = [d.lower() for d in os.listdir(".") if os.path.isdir(d) and not d.startswith(".")]
          if any(x in ["frontend", "client"] for x in top_dirs) and any(x in ["backend", "server", "api"] for x in top_dirs):
              architecture_points.append("Separate front-end and back-end modules")
          elif len(top_dirs) > 1:
              architecture_points.append("Multi-module repository structure (directories: " + ", ".join(sorted(top_dirs)) + ")")
          else:
              architecture_points.append("Single-application or monolithic structure")

          # Construct the Markdown report content
          report_lines = []
          report_lines.append("# Agent Discovery: Seven Answers")
          report_lines.append("")  # blank line

          # 1. Tech Stack
          report_lines.append("## 1. Tech Stack")
          if languages:
              report_lines.append(f"- **Languages:** " + ", ".join(sorted(languages)))
          else:
              report_lines.append("- **Languages:** Not detected")
          if frameworks:
              report_lines.append(f"- **Frameworks/Libraries:** " + ", ".join(sorted(frameworks)))
          else:
              report_lines.append("- **Frameworks/Libraries:** (None identified)")

          # 2. Runtime Environment
          report_lines.append("\n## 2. Runtime Environment")
          if runtime_info:
              for info in sorted(set(runtime_info)):
                  report_lines.append(f"- {info}")
          else:
              report_lines.append("- No specific runtime/platform configuration identified")

          # 3. Data Storage
          report_lines.append("\n## 3. Data Storage")
          if data_stores:
              report_lines.append(f"- **Databases/Storage:** " + ", ".join(sorted(data_stores)))
          else:
              report_lines.append("- No specific database or data storage identified")

          # 4. External Integrations
          report_lines.append("\n## 4. External Integrations")
          if external_services:
              report_lines.append(f"- **Services/APIs:** " + ", ".join(sorted(external_services)))
          else:
              report_lines.append("- No external third-party integrations identified")

          # 5. Security & Compliance
          report_lines.append("\n## 5. Security & Compliance")
          if security_points:
              for point in sorted(set(security_points)):
                  report_lines.append(f"- {point}")
          else:
              report_lines.append("- No notable security or compliance measures found in code")

          # 6. CI/CD & DevOps
          report_lines.append("\n## 6. CI/CD & DevOps")
          if ci_cd_points:
              for ci in sorted(set(ci_cd_points)):
                  report_lines.append(f"- {ci}")
          else:
              report_lines.append("- No Continuous Integration/Deployment configuration found")

          # 7. Architecture & Design
          report_lines.append("\n## 7. Architecture & Design")
          if architecture_points:
              for arch in architecture_points:
                  report_lines.append(f"- {arch}")
          else:
              report_lines.append("- Not enough information to determine architecture")

          report_content = "\n".join(report_lines)

          # Write the report to a file for artifact upload
          with open("agent-discovery-report.md", "w") as f:
              f.write(report_content)

          # Create a GitHub Issue with the report
          api_url = f"https://api.github.com/repos/{repo_full_name}/issues"
          headers = {
              "Authorization": f"Bearer {token}",
              "Accept": "application/vnd.github.v3+json"
          }
          issue_data = {
              "title": "Agent Bootstrap: Seven Answers",
              "body": report_content
          }
          resp = requests.post(api_url, json=issue_data, headers=headers)
          if resp.status_code >= 300:
              print(f"Failed to create issue: {resp.status_code} - {resp.text}")
          else:
              issue_url = resp.json().get("html_url")
              print(f"✅ Issue created: {issue_url}")

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: agent-discovery-report  # artifact name
          path: agent-discovery-report.md  # path to the report file:contentReference[oaicite:9]{index=9}
