name: Auto Deploy & QA

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  deploy:
    name: Deploy Backend (Render) & Frontend (Vercel)
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render backend deploy
        if: ${{ secrets.RENDER_DEPLOY_HOOK != '' }}
        run: |
          curl -fsSL -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
          echo "Render deploy hook triggered."

      - name: Trigger Vercel frontend deploy
        if: ${{ secrets.VERCEL_DEPLOY_HOOK != '' }}
        run: |
          curl -fsSL -X POST "${{ secrets.VERCEL_DEPLOY_HOOK }}"
          echo "Vercel deploy hook triggered."

  wait_for_backend:
    name: Wait for Backend Health
    needs: [deploy]
    runs-on: ubuntu-latest
    env:
      API_BASE_URL: ${{ vars.API_BASE_URL }}
    steps:
      - name: Poll health endpoint
        run: |
          echo "Waiting for backend at $API_BASE_URL ..."
          for i in {1..40}; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$API_BASE_URL/api/integrations/meta/status")
            if [ "$code" = "200" ]; then
              echo "Backend healthy."
              exit 0
            fi
            echo "Not ready yet ($i/40). Sleeping 15s..."
            sleep 15
          done
          echo "Backend did not become healthy in time."
          exit 1

  qa_agents:
    name: Run Agent Pipeline (includes QA)
    needs: [wait_for_backend]
    runs-on: ubuntu-latest
    env:
      # pass secrets to downstream jobs/agents
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      EQUATIV_API_KEY: ${{ secrets.EQUATIV_API_KEY }}
      MINIMAX_API_KEY: ${{ secrets.MINIMAX_API_KEY }}
      MINIMAX_GROUP_ID: ${{ secrets.MINIMAX_GROUP_ID }}
      DEFAULT_AGENCY_MARGIN_PCT: ${{ secrets.DEFAULT_AGENCY_MARGIN_PCT }}
      DEFAULT_ADMIN_BUFFER_PCT: ${{ secrets.DEFAULT_ADMIN_BUFFER_PCT }}
      API_BASE_URL: ${{ vars.API_BASE_URL }}
    steps:
      - name: Install GitHub CLI
        uses: cli/cli@v3
        with:
          version: latest

      - name: Trigger existing Agent Pipeline workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # If your agent workflow has a different name, change it below:
          wf_name="Agent Pipeline"
          echo "Triggering \"$wf_name\" on main ..."
          gh workflow run "$wf_name" --ref main
          echo "Waiting for the run to start..."
          sleep 10
          gh run watch --exit-status

      # Optional: quick smoke checks if you want CI to validate endpoints too
      - name: Smoke test Pricing API
        run: |
          curl -fsSL "${API_BASE_URL}/api/campaigns/price?base=1000&agency_pct=15&admin_pct=5" | jq .
      - name: Smoke test Creative (text)
        run: |
          curl -fsSL -X POST "${API_BASE_URL}/api/creatives/text" \
            -H "Content-Type: application/json" \
            -d '{"product":"Sneaker X","audience":"runners in Mumbai"}' | jq .
