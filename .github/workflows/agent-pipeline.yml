name: Agent Pipeline

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read

env:
  LLM_MODEL: gpt-4o-mini

jobs:
  product_manager:
    name: Product Manager
    runs-on: ubuntu-latest
    environment: product-manager
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.30.0"
        env: { OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} }
      - name: Preflight OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_MODEL: ${{ env.LLM_MODEL }}
        run: |
          python - <<'PY'
          import os, sys
          from openai import OpenAI
          key=os.environ.get("OPENAI_API_KEY"); mdl=os.environ.get("LLM_MODEL","gpt-4o-mini")
          if not key: print("❌ OPENAI_API_KEY missing"); sys.exit(2)
          try:
            OpenAI(api_key=key).chat.completions.create(model=mdl, messages=[{"role":"user","content":"hi"}], max_tokens=1)
            print("✅ Preflight OK on:", mdl)
          except Exception as e: print("❌", e); sys.exit(2)
          PY
      - name: Run Product Manager Agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_MODEL: ${{ env.LLM_MODEL }}
        run: python agenthub/run.py --agent product_manager
      - name: Upload PRD & Backlog
        uses: actions/upload-artifact@v4
        with:
          name: product-manager-artifacts
          path: |
            agenthub/outputs/prd.md
            agenthub/outputs/backlog.csv

  research:
    name: Research
    runs-on: ubuntu-latest
    needs: product_manager
    environment: research
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.30.0"
      - name: Run Research Agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_MODEL: ${{ env.LLM_MODEL }}
        run: python agenthub/run.py --agent research
      - uses: actions/upload-artifact@v4
        with:
          name: research-artifacts
          path: agenthub/outputs/fact_pack.md

  architect:
    name: Architect
    runs-on: ubuntu-latest
    needs: research
    environment: architect
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.30.0"
      - name: Run Architect Agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_MODEL: ${{ env.LLM_MODEL }}
        run: python agenthub/run.py --agent architect
      - uses: actions/upload-artifact@v4
        with:
          name: architect-artifacts
          path: agenthub/outputs/architecture.md

  engineer:
    name: Engineer
    runs-on: ubuntu-latest
    needs: architect
    environment: engineer
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.30.0"
      - name: Run Engineer Agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_MODEL: ${{ env.LLM_MODEL }}
        run: python agenthub/run.py --agent engineer
      - uses: actions/upload-artifact@v4
        with:
          name: engineer-artifacts
          path: agenthub/outputs/code_plan.md

  qa:
    name: QA
    runs-on: ubuntu-latest
    needs: engineer
    environment: qa
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.30.0"
      - name: Run QA Agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_MODEL: ${{ env.LLM_MODEL }}
        run: python agenthub/run.py --agent qa
      - uses: actions/upload-artifact@v4
        with:
          name: qa-artifacts
          path: agenthub/outputs/test_plan.md

  docs:
    name: Docs
    runs-on: ubuntu-latest
    needs: qa
    environment: docs
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.30.0"
      - name: Run Docs Agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_MODEL: ${{ env.LLM_MODEL }}
        run: python agenthub/run.py --agent docs
      - uses: actions/upload-artifact@v4
        with:
          name: docs-artifacts
          path: |
            agenthub/outputs/readme.md
            agenthub/outputs/api_docs.md
            agenthub/outputs/release_notes.md

  growth:
    name: Growth
    runs-on: ubuntu-latest
    needs: docs
    environment: growth
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.30.0"
      - name: Run Growth Agent
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_MODEL: ${{ env.LLM_MODEL }}
        run: python agenthub/run.py --agent growth
      - uses: actions/upload-artifact@v4
        with:
          name: growth-artifacts
          path: |
            agenthub/outputs/positioning.md
            agenthub/outputs/kpis.md
